// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
package com.yt8492.seihekianalyzerv2.proto

import com.github.marcoferrer.krotoplus.coroutines.StubDefinition
import com.github.marcoferrer.krotoplus.coroutines.client.clientCallUnary
import com.github.marcoferrer.krotoplus.coroutines.server.ServiceScope
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallUnary
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallUnimplementedUnary
import com.github.marcoferrer.krotoplus.coroutines.withCoroutineContext
import io.grpc.BindableService
import io.grpc.CallOptions
import io.grpc.Channel
import io.grpc.MethodDescriptor
import io.grpc.ServerServiceDefinition
import io.grpc.stub.AbstractStub
import io.grpc.stub.StreamObserver
import io.grpc.stub.annotations.RpcMethod
import javax.annotation.Generated
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmStatic

@Generated(
        value = ["by Kroto+ Proto-c Grpc Coroutines Plugin (version 0.5.0)"],
        comments = "Source: api.proto"
)
object SeihekiAnalyzerCoroutineGrpc {
    const val SERVICE_NAME: String = SeihekiAnalyzerGrpc.SERVICE_NAME

    @JvmStatic
    @get:RpcMethod(
            fullMethodName = "$SERVICE_NAME/Analyze",
            requestType = Urls::class,
            responseType = AnalyzeResult::class,
            methodType = MethodDescriptor.MethodType.UNARY
    )
    val analyzeMethod: MethodDescriptor<Urls, AnalyzeResult>
        get() = SeihekiAnalyzerGrpc.getAnalyzeMethod()

    fun newStub(channel: Channel): SeihekiAnalyzerCoroutineStub =
            SeihekiAnalyzerCoroutineStub.newStub(channel)
    suspend fun newStubWithContext(channel: Channel): SeihekiAnalyzerCoroutineStub =
            SeihekiAnalyzerCoroutineStub.newStubWithContext(channel)
    class SeihekiAnalyzerCoroutineStub private constructor(channel: Channel, callOptions:
            CallOptions = CallOptions.DEFAULT) : AbstractStub<SeihekiAnalyzerCoroutineStub>(channel,
            callOptions) {
        override fun build(channel: Channel, callOptions: CallOptions): SeihekiAnalyzerCoroutineStub
                = SeihekiAnalyzerCoroutineStub(channel,callOptions)

        suspend fun analyze(request: Urls = Urls.getDefaultInstance()): AnalyzeResult =
                clientCallUnary(request, SeihekiAnalyzerGrpc.getAnalyzeMethod())

        suspend inline fun analyze(block: Urls.Builder.() -> Unit): AnalyzeResult {
            val request = Urls.newBuilder()
                .apply(block)
                .build()
            return analyze(request)
        }

        companion object : StubDefinition<SeihekiAnalyzerCoroutineStub> {
            override val serviceName: String = SeihekiAnalyzerGrpc.SERVICE_NAME

            override fun newStub(channel: Channel): SeihekiAnalyzerCoroutineStub =
                    SeihekiAnalyzerCoroutineStub(channel)
            override suspend fun newStubWithContext(channel: Channel): SeihekiAnalyzerCoroutineStub
                    = SeihekiAnalyzerCoroutineStub(channel).withCoroutineContext()}
    }

    abstract class SeihekiAnalyzerImplBase : BindableService, ServiceScope {
        private val delegate: ServiceDelegate = ServiceDelegate()

        override fun bindService(): ServerServiceDefinition = delegate.bindService()
        open suspend fun analyze(request: Urls): AnalyzeResult =
                serverCallUnimplementedUnary(SeihekiAnalyzerGrpc.getAnalyzeMethod())

        private inner class ServiceDelegate : SeihekiAnalyzerGrpc.SeihekiAnalyzerImplBase() {
            override fun analyze(request: Urls, responseObserver: StreamObserver<AnalyzeResult>) {
                serverCallUnary(SeihekiAnalyzerGrpc.getAnalyzeMethod(),responseObserver) {
                    analyze(request)
                }
            }
        }
    }
}
