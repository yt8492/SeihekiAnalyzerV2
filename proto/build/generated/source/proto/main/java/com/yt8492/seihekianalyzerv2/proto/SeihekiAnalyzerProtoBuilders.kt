// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
@file:JvmName("-SeihekiAnalyzerProtoBuilders")

package com.yt8492.seihekianalyzerv2.proto

import kotlin.DslMarker
import kotlin.Unit
import kotlin.annotation.AnnotationRetention
import kotlin.annotation.AnnotationTarget
import kotlin.annotation.Retention
import kotlin.annotation.Target
import kotlin.jvm.JvmName

inline fun Empty.copy(block: Empty.Builder.() -> Unit): Empty =
        this.toBuilder().apply(block).build()

operator fun Empty.plus(other: Empty): Empty = this.toBuilder().mergeFrom(other).build()

fun Empty?.orDefault(): Empty = this ?: Empty.getDefaultInstance()

inline fun Tag.copy(block: Tag.Builder.() -> Unit): Tag = this.toBuilder().apply(block).build()

operator fun Tag.plus(other: Tag): Tag = this.toBuilder().mergeFrom(other).build()

fun Tag?.orDefault(): Tag = this ?: Tag.getDefaultInstance()

inline fun Url.copy(block: Url.Builder.() -> Unit): Url = this.toBuilder().apply(block).build()

operator fun Url.plus(other: Url): Url = this.toBuilder().mergeFrom(other).build()

fun Url?.orDefault(): Url = this ?: Url.getDefaultInstance()

inline fun Urls.copy(block: Urls.Builder.() -> Unit): Urls = this.toBuilder().apply(block).build()

operator fun Urls.plus(other: Urls): Urls = this.toBuilder().mergeFrom(other).build()

fun Urls?.orDefault(): Urls = this ?: Urls.getDefaultInstance()

inline fun Urls.Builder.addUrls(block: Url.Builder.() -> Unit): Urls.Builder =
        this.addUrls(Url.newBuilder().apply(block).build())

inline fun Work.copy(block: Work.Builder.() -> Unit): Work = this.toBuilder().apply(block).build()

operator fun Work.plus(other: Work): Work = this.toBuilder().mergeFrom(other).build()

fun Work?.orDefault(): Work = this ?: Work.getDefaultInstance()

inline fun Work.Builder.url(block: Url.Builder.() -> Unit): Work.Builder =
        this.setUrl(Url.newBuilder().apply(block).build())

inline fun Work.Builder.addTags(block: Tag.Builder.() -> Unit): Work.Builder =
        this.addTags(Tag.newBuilder().apply(block).build())

inline fun TagCount.copy(block: TagCount.Builder.() -> Unit): TagCount =
        this.toBuilder().apply(block).build()

operator fun TagCount.plus(other: TagCount): TagCount = this.toBuilder().mergeFrom(other).build()

fun TagCount?.orDefault(): TagCount = this ?: TagCount.getDefaultInstance()

inline fun TagCount.Builder.tag(block: Tag.Builder.() -> Unit): TagCount.Builder =
        this.setTag(Tag.newBuilder().apply(block).build())

inline fun AnalyzeResult.copy(block: AnalyzeResult.Builder.() -> Unit): AnalyzeResult =
        this.toBuilder().apply(block).build()

operator fun AnalyzeResult.plus(other: AnalyzeResult): AnalyzeResult =
        this.toBuilder().mergeFrom(other).build()

fun AnalyzeResult?.orDefault(): AnalyzeResult = this ?: AnalyzeResult.getDefaultInstance()

inline fun AnalyzeResult.Builder.addTagCounts(block: TagCount.Builder.() -> Unit):
        AnalyzeResult.Builder = this.addTagCounts(TagCount.newBuilder().apply(block).build())

inline fun User.copy(block: User.Builder.() -> Unit): User = this.toBuilder().apply(block).build()

operator fun User.plus(other: User): User = this.toBuilder().mergeFrom(other).build()

fun User?.orDefault(): User = this ?: User.getDefaultInstance()

inline fun NotificationToken.copy(block: NotificationToken.Builder.() -> Unit): NotificationToken =
        this.toBuilder().apply(block).build()

operator fun NotificationToken.plus(other: NotificationToken): NotificationToken =
        this.toBuilder().mergeFrom(other).build()

fun NotificationToken?.orDefault(): NotificationToken = this ?:
        NotificationToken.getDefaultInstance()

inline fun UserNotificationToken.copy(block: UserNotificationToken.Builder.() -> Unit):
        UserNotificationToken = this.toBuilder().apply(block).build()

operator fun UserNotificationToken.plus(other: UserNotificationToken): UserNotificationToken =
        this.toBuilder().mergeFrom(other).build()

fun UserNotificationToken?.orDefault(): UserNotificationToken = this ?:
        UserNotificationToken.getDefaultInstance()

inline fun UserNotificationToken.Builder.user(block: User.Builder.() -> Unit):
        UserNotificationToken.Builder = this.setUser(User.newBuilder().apply(block).build())

inline fun UserNotificationToken.Builder.token(block: NotificationToken.Builder.() -> Unit):
        UserNotificationToken.Builder =
        this.setToken(NotificationToken.newBuilder().apply(block).build())

inline fun Empty(block: Empty.Builder.() -> Unit): Empty = Empty.newBuilder().apply(block).build()

inline fun Tag(block: Tag.Builder.() -> Unit): Tag = Tag.newBuilder().apply(block).build()

inline fun Url(block: Url.Builder.() -> Unit): Url = Url.newBuilder().apply(block).build()

inline fun Urls(block: Urls.Builder.() -> Unit): Urls = Urls.newBuilder().apply(block).build()

inline fun Work(block: Work.Builder.() -> Unit): Work = Work.newBuilder().apply(block).build()

inline fun TagCount(block: TagCount.Builder.() -> Unit): TagCount =
        TagCount.newBuilder().apply(block).build()

inline fun AnalyzeResult(block: AnalyzeResult.Builder.() -> Unit): AnalyzeResult =
        AnalyzeResult.newBuilder().apply(block).build()

inline fun User(block: User.Builder.() -> Unit): User = User.newBuilder().apply(block).build()

inline fun NotificationToken(block: NotificationToken.Builder.() -> Unit): NotificationToken =
        NotificationToken.newBuilder().apply(block).build()

inline fun UserNotificationToken(block: UserNotificationToken.Builder.() -> Unit):
        UserNotificationToken = UserNotificationToken.newBuilder().apply(block).build()

@DslMarker
@Target(AnnotationTarget.CLASS)
@Retention(AnnotationRetention.BINARY)
annotation class SeihekiAnalyzerProtoDslMarker

@SeihekiAnalyzerProtoDslMarker
interface SeihekiAnalyzerProtoDslBuilder
